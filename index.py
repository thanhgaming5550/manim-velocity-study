from manim import *

def create_text(content: str):
    return Text(content, font_size=20, font="Noto Sans")

def gradient_white_color(n):
    return ImageMobject(np.uint8([[i * 256 / n for i in range(0, n)] for _ in range(0, n)]))

class Count(Animation):
    def __init__(self, number: DecimalNumber, start: float, end: float, **kwargs) -> None:
        super().__init__(number, **kwargs)
        self.start = start
        self.end = end

    def interpolate_mobject(self, alpha: float) -> None:
        value = self.start + (alpha * (self.end - self.start))
        self.mobject.set_value(value)

class Index(Scene):
    def construct(self):
        title = Text("Vận tốc", font_size=144, font="Noto Sans")
        origin_marker = Line([-0.25, 0, 0], [0.25, 0, 0]).rotate(PI/2).shift(DOWN)
        axis_line = Line([-6, 0, 0], [6, 0, 0]).shift(DOWN)
        description1 = Text("Vận tốc phụ thuộc vào chiều dương", font="Noto Sans", font_size=22).shift(UP)
        description2 = Text("Chọn vật mốc như hình, chiều dương theo chiều vectơ", font="Noto Sans", font_size=18).next_to(description1, DOWN*0.5)
        reference_object = Text("Vật mốc", font_size=20, font="Noto Sans").next_to(origin_marker, DOWN*0.4)
        direction_vector = Arrow(ORIGIN, [2, 0, 0]).shift(RIGHT * 5).shift(DOWN)
        formula = MathTex("V = \\frac{S}{t}").shift(UP * 2)
        direction_text = Text("Chiều dương", font_size=20, font="Noto Sans").next_to(direction_vector, DOWN*0.5)
        formula_label = Text("Công thức:", font_size=25, font="Noto Sans").next_to(formula, LEFT)
        formula_description = create_text("Trong đó: ").next_to(formula, RIGHT)
        velocity_description = create_text("V: Vận tốc").next_to(formula_description, RIGHT + UP*0.5)
        distance_description = create_text("S: Quãng đường").next_to(formula_description, RIGHT)
        time_description = create_text("t: Thời gian").next_to(formula_description, RIGHT + DOWN*0.5)

        unit_markers = VGroup(
            *[Line([-0.05, 0, 0], [0.05, 0, 0]).rotate(PI/2).shift(DOWN).shift(RIGHT * i) for i in range(1, 7)],
            *[Line([-0.05, 0, 0], [0.05, 0, 0]).rotate(PI/2).shift(DOWN).shift(LEFT * i) for i in range(1, 7)]
        )

        time_label = Text("t = ", font_size=40).next_to(axis_line, DOWN*6 + LEFT*0.7)
        time_value = DecimalNumber().set_color(WHITE).next_to(time_label, RIGHT)
        time_group = VGroup(time_label, time_value)

        moving_dot = Dot(color=BLUE).shift(DOWN)
        coordinate_label = create_text("Tọa độ: ").next_to(origin_marker, DOWN * 2 + LEFT*0.5)
        coordinate_value = DecimalNumber().set_color(WHITE).next_to(coordinate_label, RIGHT*0.5)

        distance_label = Text("S", color=YELLOW).shift(LEFT*4 + UP*0.5)
        equals_sign1 = Text(" = ", color=WHITE).next_to(distance_label, RIGHT)
        end_position_value = DecimalNumber().set_color(RED).next_to(equals_sign1, RIGHT)
        minus_sign = Text(" - ", color=WHITE).next_to(end_position_value, RIGHT)
        start_position_value = DecimalNumber().set_color(GREEN).next_to(minus_sign, RIGHT)
        equals_sign2 = Text(" = ", color=WHITE).next_to(start_position_value, RIGHT*2)
        distance_value = DecimalNumber().set_color(YELLOW).next_to(equals_sign2, RIGHT)
        start_dot = Dot(color=GREEN).shift(DOWN + LEFT * 4)
        end_dot = Dot(color=RED).shift(DOWN + LEFT * 4)
        distance_line = Line()
        distance_line.add_updater(lambda z: z.become(Line(start_dot.get_center(), end_dot.get_center()).set_color(YELLOW)))

        direction_note = create_text("Nếu tọa độ điểm nằm cùng về phía với chiều dương thì nó dương và ngược lại").shift(UP)
        opposite_vector = Arrow(ORIGIN, [-2, 0, 0]).next_to(axis_line, UP*2).shift(LEFT)

        distance_note1 = create_text("Quãng đường (S) là khoảng cách từ vị trí (tọa độ) đầu đên vị trí (tọa độ) cuối").shift(UP*2 + LEFT*2)
        distance_note2 = create_text("hay nói cách khác là bằng vị trí (tọa độ) cuối trừ cho vị trí (tọa độ) đầu").shift(UP*1.5 + LEFT*2)

        time_note = create_text("Thời gian (t) là thời gian chất điểm đi từ vị trí (tọa độ) đầu đến vị trí (tọa độ) cuối").shift(UP*2 + LEFT*2)

        self.wait(1)
        self.play(Write(title))
        self.wait(3)
        self.play(Transform(title, origin_marker))
        self.play(Create(axis_line))
        self.play(Create(description1))
        self.wait(1)
        self.play(Create(description2))
        self.wait(0.5)
        self.play(Create(reference_object))
        self.play(Create(direction_vector))
        self.play(Create(direction_text))
        self.wait(3)
        self.play(FadeOut(description1, description2, direction_text, reference_object), direction_vector.animate.next_to(axis_line, UP*2).shift(RIGHT))
        self.play(FadeIn(formula_label, formula))
        self.play(FadeIn(formula_description, velocity_description, distance_description, time_description))
        self.wait(3)
        self.play(FadeOut(formula_label, formula_description, velocity_description, distance_description, time_description), formula.animate.next_to(axis_line, UP*10).shift(RIGHT*5))
        self.play(FadeIn(unit_markers))
        self.play(FadeIn(moving_dot, coordinate_label, coordinate_value))
        self.wait(1)

        self.play(moving_dot.animate.shift(LEFT * 4), Count(coordinate_value, 0, -4))
        self.wait(1)
        self.wait(1)
        self.play(moving_dot.animate.shift(RIGHT * 7), Count(coordinate_value, -4, 3))
        self.play(FadeIn(direction_note))
        self.wait(1)
        self.play(Transform(direction_vector, opposite_vector), Count(coordinate_value, 3, -3))
        self.wait(1)
        self.play(moving_dot.animate.shift(LEFT * 5), Count(coordinate_value, -3, 2))
        self.wait(1)
        self.play(moving_dot.animate.shift(LEFT * 2), Count(coordinate_value, 2, 4))
        self.wait(1)
        self.play(Transform(direction_vector, Arrow(ORIGIN, [2, 0, 0]).next_to(axis_line, UP*2).shift(RIGHT)), Count(coordinate_value, 4, -4))
        self.wait(1)
        self.play(moving_dot.animate.shift(LEFT * 1), Count(coordinate_value, -4, -5))
        self.wait(1)
        self.play(moving_dot.animate.shift(RIGHT * 8), Count(coordinate_value, -5, 3))
        self.wait(1)
        self.play(moving_dot.animate.shift(RIGHT * 3), Count(coordinate_value, 3, 6))
        self.wait(1)
        self.play(moving_dot.animate.shift(LEFT * 6), Count(coordinate_value, 6, 0), FadeOut(direction_note))
        self.play(FadeIn(distance_note1))
        self.play(moving_dot.animate.shift(LEFT * 4), Count(coordinate_value, 0, -4), FadeIn(distance_note2))
        self.play(FadeIn(distance_label, equals_sign1))
        self.play(FadeIn(start_dot), Count(start_position_value, 0, -4))
        self.wait(1)
        self.play(moving_dot.animate.shift(RIGHT * 7), Count(coordinate_value, -4, 3), Create(minus_sign), FadeIn(distance_line), end_dot.animate.shift(RIGHT * 7), Count(end_position_value, 0, 3))
        self.wait(1)
        self.play(FadeIn(equals_sign2))
        self.play(Count(distance_value, 0, 7))
        self.wait(5)
        self.play(FadeOut(distance_label, equals_sign1, end_position_value, minus_sign, start_position_value, equals_sign2, distance_value, distance_note2, distance_note1))
        self.wait(1)
        self.play(FadeIn(time_group))
        self.play(FadeIn(time_note))
        self.wait(3)
        self.play(moving_dot.animate.shift(LEFT * 7), Count(coordinate_value, 3, -4), Count(time_value, 0, 5), run_time=5)
        self.wait(3)
        self.play(FadeOut(time_note))
        self.play(Count(time_value, 5, 0), run_time=0.3)
        self.wait(1)
        self.play(moving_dot.animate.shift(RIGHT * 7), Count(coordinate_value, -4, 3), Count(time_value, 0, 7), run_time=7)
        self.wait(3)
        self.play(FadeOut(distance_line, start_dot, end_dot))
        self.play(Count(time_value, 7, 0), moving_dot.animate.shift(LEFT * 3), Count(coordinate_value, 3, 0), run_time=0.3)
        self.wait(1)

        distance_label = Text("S", color=YELLOW).shift(LEFT*4 + UP*0.5)
        equals_sign1 = Text(" = ", color=WHITE).next_to(distance_label, RIGHT)
        end_position_value = DecimalNumber().set_color(RED).next_to(equals_sign1, RIGHT)
        minus_sign = Text(" - ", color=WHITE).next_to(end_position_value, RIGHT)
        start_position_value = DecimalNumber().set_color(GREEN).next_to(minus_sign, RIGHT)
        equals_sign2 = Text(" = ", color=WHITE).next_to(start_position_value, RIGHT*2)
        distance_value = DecimalNumber().set_color(YELLOW).next_to(equals_sign2, RIGHT)
        start_dot = Dot(color=GREEN).shift(DOWN + LEFT * 2)
        end_dot = Dot(color=RED).shift(DOWN + RIGHT * 3)
        distance_line = Line()
        distance_line.add_updater(lambda z: z.become(Line(start_dot.get_center(), moving_dot.get_center()).set_color(YELLOW)))

        example_note1 = create_text("Giả sử điểm xuất phát là Vị trị thứ -2, điểm dừng là Vị trí thứ 3").shift(UP*2 + LEFT*2)
        self.play(FadeIn(example_note1))
        self.wait(1)
        example_note2 = create_text("và thời gian di chuyển của chất điểm là 8s").shift(UP*1.5 + LEFT*2)
        self.play(FadeIn(start_dot, end_dot, example_note2))
        self.wait(2)
        self.play(FadeOut(example_note1, example_note2), moving_dot.animate.shift(LEFT * 2), Count(coordinate_value, 0, -2))
        calculation_note = Text("Ta sẽ có: ", font_size=31, font="Noto Sans").shift(UP*2 + LEFT*3)
        self.play(FadeIn(calculation_note))
        self.play(FadeIn(distance_label, equals_sign1, minus_sign))
        self.play(Count(start_position_value, 0, -2))
        self.play(moving_dot.animate.shift(RIGHT * 5), Count(coordinate_value, -2, 3), Count(time_value, 0, 8), FadeIn(distance_line), run_time=8)
        self.play(Count(end_position_value, 0, 3))
        self.play(FadeIn(equals_sign2))
        self.play(Count(distance_value, 0, 5))
        self.wait(3)
        self.play(FadeOut(calculation_note, equals_sign1, minus_sign, end_position_value, start_position_value), VGroup(equals_sign2, distance_value).animate.shift(LEFT * 3 + UP*1), distance_label.animate.shift(UP*1+RIGHT*0.5), time_group.animate.next_to(origin_marker, UP*4 + LEFT*7))
        fraction_line = Line(UP*1 + LEFT*4.3, UP*1 + LEFT*1.3)
        self.play(Create(fraction_line))
        equals_sign3 = Text(" = ", color=WHITE).next_to(fraction_line, RIGHT*0.5)
        velocity_value = DecimalNumber().set_color(WHITE).next_to(equals_sign3, RIGHT*0.5)
        self.play(Create(equals_sign3))
        self.play(Count(velocity_value, 0, (5/8)))
        self.wait(3)
        velocity_label = Text("V ", font_size=40, font="Noto Sans").next_to(equals_sign3, LEFT*0.5)
        self.play(Transform(VGroup(equals_sign2, distance_value, distance_label, time_group, fraction_line), velocity_label))
        self.wait(1)
        self.play(VGroup(equals_sign3, velocity_value, velocity_label, VGroup(equals_sign2, distance_value, distance_label, time_group, fraction_line)).animate.next_to(origin_marker, UP*3.5))
        self.wait(5)
        self.play(FadeOut(distance_line))
        self.play(FadeOut(axis_line, origin_marker, title, unit_markers, VGroup(equals_sign2, distance_value, distance_label, time_group, fraction_line), VGroup(equals_sign3, velocity_value, velocity_label), direction_vector, start_dot, end_dot, coordinate_label, coordinate_value, moving_dot))
        self.play(formula.animate.next_to(origin_marker, UP))
        self.wait(5)

        self.play(Transform(formula, Text("Vận tốc", font_size=144, font="Noto Sans")))
        self.wait(5)
        self.play(FadeOut(formula))
        self.wait(3)

# Code Beautiful by Github Copilot